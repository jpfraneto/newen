// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String            @id @default(cuid())
  name           String?
  oauthProvider           String?
  email          String?           @unique
  username       String?           @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  providerAccountId String? @unique
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
  sadhanas       Sadhana[]         // Created sadhanas by the user
  participatedSadhanas Sadhana[]   @relation("SadhanaParticipants") // Sadhanas the user is participating in
  socials        Social[]
  sadhanaSessions SadhanaSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Sadhana {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  title               String
  content             String?
  author              User            @relation(fields: [authorId], references: [id])
  authorId            String
  participants        User[]          @relation("SadhanaParticipants")
  imageUrl            String?
  targetSessions      Int
  targetSessionDuration Int
  periodicity         String
  startingTimestamp   String
  userLimit           Int
  elapsedDays         Int @default(0)
  started             Boolean  @default(false)
  sadhanaSessions     SadhanaSession[]
  sadhanaDays         SadhanaDay[]
  isPrivate             Boolean
}

model SadhanaDay {
  id          String              @id @default(cuid())
  dayIndex    Int
  sadhana     Sadhana          @relation(fields: [sadhanaId], references: [id])
  sadhanaId   Int
  sessions    SadhanaSession[]
  comments    Comment[]

  @@unique([sadhanaId, dayIndex])
}

model Comment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  sadhanaDayId String
  sadhanaDay  SadhanaDay @relation(fields: [sadhanaDayId], references: [id])
}

model SadhanaSession {
  id           String   @id @default(cuid())
  sessionIndex     Int?
  startingTimestamp DateTime?
  finishedTimestamp DateTime?
  completedAt       DateTime
  author           User     @relation(fields: [authorId], references: [id])
  authorId         String
  sadhana          Sadhana  @relation(fields: [sadhanaId], references: [id])
  sadhanaId        Int
  sadhanaDay       SadhanaDay @relation(fields: [sadhanaDayId], references: [id])
  sadhanaDayId     String
  notes            String?
  feeling          Int
}

model Social {
  id       String  @id @default(cuid())
  platform String
  link     String
  main     Boolean
  user     User    @relation(fields: [userId], references: [id])
  userId   String
}

